{"ast":null,"code":"const initialState = {\n  queue: [{\n    title: \"test\",\n    genre: \"test\",\n    link: 'test',\n    runtime: 'test',\n    user: 'test'\n  }],\n  archive: [],\n  marqueeFilm: [{\n    title: \"fake\",\n    genre: \"ishh\",\n    link: 'pop',\n    runtime: 'jakey',\n    user: 'rivers'\n  }],\n  isMarqueeVisible: false\n};\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"addToQueue\":\n      return { ...state,\n        queue: state.queue.concat(action.payload)\n      };\n\n    case \"removeFromQueue\":\n      return { ...state,\n        queue: state.queue.filter((payload, index) => index !== action.payload)\n      };\n\n    case \"addToMarquee\":\n      return { ...state,\n        marqueeFilm: [...state.queue.filter((payload, index) => index === action.payload)],\n        queue: state.queue.filter((payload, index) => index !== action.payload),\n        isMarqueeVisible: true\n      };\n\n    case \"addToArchive\":\n      return { ...state,\n        archive: [...state.archive, ...state.marqueeFilm.filter((payload, index) => index === action.payload)],\n        marqueeFilm: [],\n        isMarqueeVisible: false\n      };\n\n    case \"getMarqueeStatus\":\n      return {\n        isMarqueeVisible: this.payload\n      };\n\n    default:\n      return state;\n  }\n\n  ;\n}","map":{"version":3,"sources":["/Users/averyangel/Documents/GitHub/dmc_movienight/src/components/redux/reducers/movieReducer.js"],"names":["initialState","queue","title","genre","link","runtime","user","archive","marqueeFilm","isMarqueeVisible","state","action","type","concat","payload","filter","index"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CAAC;AAACC,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE,MAAvB;AAA+BC,IAAAA,IAAI,EAAE,MAArC;AAA6CC,IAAAA,OAAO,EAAE,MAAtD;AAA8DC,IAAAA,IAAI,EAAE;AAApE,GAAD,CADY;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,WAAW,EAAE,CAAC;AAACN,IAAAA,KAAK,EAAE,MAAR;AAAgBC,IAAAA,KAAK,EAAE,MAAvB;AAA+BC,IAAAA,IAAI,EAAE,KAArC;AAA4CC,IAAAA,OAAO,EAAE,OAArD;AAA8DC,IAAAA,IAAI,EAAE;AAApE,GAAD,CAHM;AAInBG,EAAAA,gBAAgB,EAAE;AAJC,CAArB;AAMA,eAAe,UAASC,KAAK,GAAGV,YAAjB,EAA+BW,MAA/B,EAAuC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELT,QAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYY,MAAZ,CAAmBF,MAAM,CAACG,OAA1B;AAFF,OAAP;;AAIF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELT,QAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYc,MAAZ,CAAmB,CAACD,OAAD,EAAUE,KAAV,KAAoBA,KAAK,KAAKL,MAAM,CAACG,OAAxD;AAFF,OAAP;;AAIF,SAAK,cAAL;AACA,aAAO,EACL,GAAGJ,KADE;AAELF,QAAAA,WAAW,EAAE,CACT,GAAGE,KAAK,CAACT,KAAN,CAAYc,MAAZ,CAAmB,CAACD,OAAD,EAAUE,KAAV,KAAoBA,KAAK,KAAKL,MAAM,CAACG,OAAxD,CADM,CAFR;AAKLb,QAAAA,KAAK,EAAES,KAAK,CAACT,KAAN,CAAYc,MAAZ,CAAmB,CAACD,OAAD,EAAUE,KAAV,KAAoBA,KAAK,KAAKL,MAAM,CAACG,OAAxD,CALF;AAMLL,QAAAA,gBAAgB,EAAE;AANb,OAAP;;AAQA,SAAK,cAAL;AACA,aAAO,EACL,GAAGC,KADE;AAELH,QAAAA,OAAO,EAAE,CACL,GAAGG,KAAK,CAACH,OADJ,EAEL,GAAGG,KAAK,CAACF,WAAN,CAAkBO,MAAlB,CAAyB,CAACD,OAAD,EAAUE,KAAV,KAAoBA,KAAK,KAAKL,MAAM,CAACG,OAA9D,CAFE,CAFJ;AAMLN,QAAAA,WAAW,EAAE,EANR;AAOLC,QAAAA,gBAAgB,EAAE;AAPb,OAAP;;AASA,SAAK,kBAAL;AACA,aAAO;AACLA,QAAAA,gBAAgB,EAAE,KAAKK;AADlB,OAAP;;AAGA;AACE,aAAOJ,KAAP;AAnCJ;;AAoCC;AACF","sourcesContent":["const initialState = {\n  queue: [{title: \"test\", genre: \"test\", link: 'test', runtime: 'test', user: 'test'}],\n  archive: [],\n  marqueeFilm: [{title: \"fake\", genre: \"ishh\", link: 'pop', runtime: 'jakey', user: 'rivers'}],\n  isMarqueeVisible: false\n}\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case \"addToQueue\":\n      return {\n        ...state,\n        queue: state.queue.concat(action.payload)\n      };\n    case \"removeFromQueue\":\n      return {\n        ...state,\n        queue: state.queue.filter((payload, index) => index !== action.payload)\n      };\n    case \"addToMarquee\":\n    return {\n      ...state,\n      marqueeFilm: [\n          ...state.queue.filter((payload, index) => index === action.payload)\n      ],\n      queue: state.queue.filter((payload, index) => index !== action.payload),\n      isMarqueeVisible: true\n    };\n    case \"addToArchive\":\n    return {\n      ...state,\n      archive: [\n          ...state.archive,\n          ...state.marqueeFilm.filter((payload, index) => index === action.payload)\n      ],\n      marqueeFilm: [],\n      isMarqueeVisible: false\n    };\n    case \"getMarqueeStatus\":\n    return {\n      isMarqueeVisible: this.payload\n    };\n    default:\n      return state;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}